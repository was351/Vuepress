{"remainingRequest":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\docs\\guide\\README.md?vue&type=template&id=1a7dd7a6&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\docs\\guide\\README.md","mtime":1616200195545},{"path":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\SRIL Resources\\vuepress-starter\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}